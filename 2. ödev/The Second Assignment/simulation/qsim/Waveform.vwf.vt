// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/01/2021 17:20:46"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ram
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ram_vlg_vec_tst();
// constants                                           
// general purpose registers
reg EN;
reg [7:0] addr;
reg clk;
reg [7:0] data;
reg rw;
// wires                                               
wire [7:0] out;
wire [7:0] out1;
wire [7:0] out2;
wire [7:0] out3;
wire [7:0] out4;
wire [7:0] out5;
wire [7:0] out6;
wire [7:0] out7;
wire [7:0] out8;
wire [7:0] out9;
wire [7:0] out10;
wire [7:0] out11;
wire [7:0] out12;
wire [7:0] out13;
wire [7:0] out14;
wire [7:0] out15;
wire [7:0] out16;

// assign statements (if any)                          
ram i1 (
// port map - connection between master ports and signals/registers   
	.EN(EN),
	.addr(addr),
	.clk(clk),
	.data(data),
	.out(out),
	.out1(out1),
	.out2(out2),
	.out3(out3),
	.out4(out4),
	.out5(out5),
	.out6(out6),
	.out7(out7),
	.out8(out8),
	.out9(out9),
	.out10(out10),
	.out11(out11),
	.out12(out12),
	.out13(out13),
	.out14(out14),
	.out15(out15),
	.out16(out16),
	.rw(rw)
);
initial 
begin 
#1000000 $finish;
end 

// EN
initial
begin
	EN = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rw
initial
begin
	rw = 1'b1;
	rw = #100000 1'b0;
	rw = #60000 1'b1;
	rw = #90000 1'b0;
	rw = #30000 1'b1;
	rw = #210000 1'b0;
	rw = #80000 1'b1;
	rw = #170000 1'b0;
end 
// addr[ 7 ]
initial
begin
	addr[7] = 1'b1;
	addr[7] = #100000 1'b0;
	addr[7] = #100000 1'b1;
	addr[7] = #100000 1'b0;
end 
// addr[ 6 ]
initial
begin
	addr[6] = 1'b1;
	addr[6] = #100000 1'b0;
	addr[6] = #100000 1'b1;
	addr[6] = #100000 1'b0;
end 
// addr[ 5 ]
initial
begin
	addr[5] = 1'b1;
	addr[5] = #100000 1'b0;
	addr[5] = #100000 1'b1;
	addr[5] = #100000 1'b0;
end 
// addr[ 4 ]
initial
begin
	addr[4] = 1'b1;
	addr[4] = #100000 1'b0;
	addr[4] = #100000 1'b1;
	addr[4] = #790000 1'b0;
end 
// addr[ 3 ]
initial
begin
	addr[3] = 1'b1;
	addr[3] = #100000 1'b0;
	addr[3] = #100000 1'b1;
	addr[3] = #100000 1'b0;
end 
// addr[ 2 ]
initial
begin
	addr[2] = 1'b1;
	addr[2] = #100000 1'b0;
	addr[2] = #100000 1'b1;
	addr[2] = #100000 1'b0;
end 
// addr[ 1 ]
initial
begin
	addr[1] = 1'b1;
	addr[1] = #100000 1'b0;
	addr[1] = #100000 1'b1;
	addr[1] = #100000 1'b0;
end 
// addr[ 0 ]
initial
begin
	addr[0] = 1'b1;
	addr[0] = #100000 1'b0;
	addr[0] = #100000 1'b1;
	addr[0] = #100000 1'b0;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b0;
	data[7] = #200000 1'b1;
	data[7] = #100000 1'b0;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b0;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
	data[5] = #100000 1'b1;
	data[5] = #100000 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
	data[4] = #100000 1'b1;
	data[4] = #100000 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b1;
	data[3] = #100000 1'b0;
	data[3] = #200000 1'b1;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b1;
	data[2] = #100000 1'b0;
	data[2] = #200000 1'b1;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b1;
	data[1] = #100000 1'b0;
	data[1] = #200000 1'b1;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b1;
	data[0] = #200000 1'b0;
	data[0] = #100000 1'b1;
end 
endmodule

